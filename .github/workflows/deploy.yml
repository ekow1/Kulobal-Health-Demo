name: Deploy Backend to VPS

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'api/package-lock.json'

    - name: Install backend dependencies
      run: |
        cd api
        npm ci

    - name: Build backend
      run: |
        cd api
        npm run build

    - name: Test SSH Connection
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        passphrase: ${{ secrets.VPS_SSH_PASSPHRASE }}
        port: ${{ secrets.VPS_PORT }}
        timeout: 30s
        command_timeout: 2m
        script: |
          echo "SSH connection test successful!"
          whoami
          pwd
          echo "Testing Docker availability..."
          docker --version

    - name: Deploy Backend to VPS
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        passphrase: ${{ secrets.VPS_SSH_PASSPHRASE }}
        port: ${{ secrets.VPS_PORT }}
        timeout: 60s
        command_timeout: 15m
        script: |
          echo "üöÄ Starting backend deployment..."
          echo "Current user: $(whoami)"
          echo "Current directory: $(pwd)"
          
          # Set deployment directory in user's home
          DEPLOY_DIR="$HOME/kulobal-backend"
          echo "Using deployment directory: $DEPLOY_DIR"
          
          # Check if deployment directory exists
          if [ ! -d "$DEPLOY_DIR" ]; then
            echo "Creating deployment directory..."
            mkdir -p "$DEPLOY_DIR"
          fi
          
          cd "$DEPLOY_DIR"
          echo "Changed to directory: $(pwd)"
          
          # Clone repository
          echo "Cloning repository..."
          git clone https://github.com/${{ github.repository }}.git .
          
          # Build backend on VPS
          echo "Building backend on VPS..."
          cd api
          npm ci
          npm run build
          cd ..
          
          # Check if Docker Compose is available (prioritize new syntax)
          if docker compose version &> /dev/null; then
            echo "Docker Compose (new) available"
            DOCKER_COMPOSE_CMD="docker compose"
          elif command -v docker-compose &> /dev/null; then
            echo "Docker Compose (legacy) available"
            DOCKER_COMPOSE_CMD="docker-compose"
          else
            echo "Installing Docker Compose..."
            curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
            echo "Docker Compose installed successfully"
            DOCKER_COMPOSE_CMD="docker-compose"
          fi
          
          # Create .env file from GitHub secrets
          echo "Creating .env file from GitHub secrets..."
          echo "# Database" > .env
          echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" >> .env
          echo "" >> .env
          echo "# JWT" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "" >> .env
          echo "# API Configuration" >> .env
          echo "PORT=5000" >> .env
          echo "NODE_ENV=production" >> .env
          echo "Environment variables configured from GitHub secrets"
          
          # Set proper permissions for .env file
          chmod 600 .env
          
          echo "Stopping containers..."
          $DOCKER_COMPOSE_CMD down --remove-orphans || echo "No containers to stop"
          
          echo "Building backend container..."
          if $DOCKER_COMPOSE_CMD build --no-cache; then
            echo "‚úÖ Backend container built successfully"
          else
            echo "‚ùå Backend container build failed"
            exit 1
          fi
          
          echo "Starting backend container..."
          if $DOCKER_COMPOSE_CMD up -d; then
            echo "‚úÖ Backend container started successfully"
          else
            echo "‚ùå Backend container startup failed"
            exit 1
          fi
          
          echo "Waiting for container to be ready..."
          sleep 10
          
          echo "Checking container status..."
          $DOCKER_COMPOSE_CMD ps
          
          # Check if container is running
          if $DOCKER_COMPOSE_CMD ps | grep -q "Up"; then
            echo "‚úÖ Backend container is running"
          else
            echo "‚ùå Backend container failed to start"
            $DOCKER_COMPOSE_CMD logs
            exit 1
          fi
          
          echo "Cleaning up Docker system..."
          docker system prune -f
          echo "‚úÖ Backend deployment completed successfully!"
